{"ast":null,"code":"import _toConsumableArray from \"/home/efimenko/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/alive-empire-game/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar Engine = function Engine(canvas, config) {\n  var cellSize = 1;\n  var w = Math.floor(canvas.width / cellSize);\n  var h = Math.floor(canvas.height / cellSize);\n\n  var _ctx = canvas.getContext('2d');\n\n  var drawing = function drawing() {\n    var _cords = cords,\n        x = _cords.x,\n        y = _cords.y;\n    draw(x, y);\n    world[x + y * w].setState(1);\n  };\n\n  var init = function init() {\n    _ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    canvas.addEventListener('mousemove', function (event) {\n      var _getCords = getCords(event),\n          x = _getCords.x,\n          y = _getCords.y;\n\n      cords = {\n        x: Math.floor(x / cellSize),\n        y: Math.floor(y / cellSize)\n      };\n    });\n    canvas.addEventListener('mousedown', function (event) {\n      drawing();\n      canvas.addEventListener('mousemove', drawing);\n    });\n    canvas.addEventListener('mouseup', function () {\n      canvas.removeEventListener('mousemove', drawing);\n    });\n  };\n\n  init();\n\n  var Cell = function Cell(state) {\n    return function (index) {\n      var j = Math.floor(index / w);\n      var i = index % w;\n\n      var c = function c(i, j) {\n        var _i = i < 0 ? 0 : i < w ? i : w - i;\n\n        var _j = j < 0 ? 0 : j < h ? j : h - j;\n\n        return _i + _j * w;\n      };\n\n      var _state = state;\n\n      var setState = function setState(s) {\n        return _state = s;\n      };\n\n      var getState = function getState() {\n        return _state;\n      };\n\n      var siblings = function siblings() {\n        return [world[c(i - 1, j - 1)], world[c(i - 1, j)], world[c(i - 1, j + 1)], world[c(i, j - 1)], world[c(i, j + 1)], world[c(i + 1, j - 1)], world[c(i + 1, j)], world[c(i + 1, j + 1)]];\n      };\n\n      return {\n        getState: getState,\n        siblings: siblings,\n        index: index,\n        setState: setState\n      };\n    };\n  };\n\n  var world = _toConsumableArray(Array(w * h).keys()).map(Cell(0));\n\n  var cords = {};\n\n  var getCords = function getCords(event) {\n    return {\n      x: event.pageX - canvas.offsetLeft,\n      y: event.pageY - canvas.offsetTop\n    };\n  };\n\n  var alive = function alive(x) {\n    return x >= 1;\n  };\n\n  var rules = function rules(prev, res) {\n    if (alive(prev)) {\n      if (res > 2 && res < 3) {\n        return prev + 0.2;\n      } else {\n        return 0.3;\n      }\n    } else {\n      if (res > 4) {\n        return prev + 1;\n      } else {\n        return prev - 0.1;\n      }\n    }\n  };\n\n  var next = function next(cell) {\n    var prev = cell.getState();\n\n    var res = _dot(cell.siblings().map(function (s) {\n      return s.getState();\n    }), _toConsumableArray(Array(8).fill(1)));\n\n    return Cell(rules(prev, res))(cell.index);\n  };\n\n  var epoch = function epoch() {\n    world = world.map(next);\n  };\n\n  var _dot = function _dot(v1, v2) {\n    return v1.reduce(function (a, x, i) {\n      return a + x * v2[i];\n    }, 0);\n  };\n\n  var draw = function draw(i, j) {\n    var state = world[i + j * w].getState();\n\n    _ctx.beginPath();\n\n    _ctx.fillStyle = \"rgb(\".concat(state * 180, \",\").concat(state * 50, \",\").concat(state * 30, \")\");\n\n    _ctx.fillRect(i * cellSize, j * cellSize, cellSize, cellSize); //_ctx.arc(i*cellSize,j*cellSize,cellSize / 2, 0, Math.PI * 2)\n\n\n    _ctx.fill();\n  };\n\n  var render = function render() {\n    return setInterval(function () {\n      epoch();\n\n      _ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      for (var i = 0; i < w; ++i) {\n        for (var j = 0; j < h; ++j) {\n          draw(i, j);\n        }\n      }\n    }, 100);\n  };\n\n  return {\n    render: render\n  };\n};\n\nexport default Engine;","map":{"version":3,"sources":["/home/efimenko/Рабочий стол/alive-empire-game/src/engine/index.js"],"names":["Engine","canvas","config","cellSize","w","Math","floor","width","h","height","_ctx","getContext","drawing","cords","x","y","draw","world","setState","init","clearRect","addEventListener","event","getCords","removeEventListener","Cell","state","index","j","i","c","_i","_j","_state","s","getState","siblings","Array","keys","map","pageX","offsetLeft","pageY","offsetTop","alive","rules","prev","res","next","cell","_dot","fill","epoch","v1","v2","reduce","a","beginPath","fillStyle","fillRect","render","setInterval"],"mappings":"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","sourcesContent":["\n\nconst Engine = (canvas, config) => {\n\tconst cellSize = 1\n\tconst w = Math.floor(canvas.width / cellSize)\n\tconst h = Math.floor(canvas.height / cellSize)\n\tconst _ctx = canvas.getContext('2d')\n\tconst drawing = () => {\n\t\tconst {x ,y} = cords;\n\t\tdraw(x, y)\n\t\tworld[x + y * w].setState(1)\n\t}\n\t\tconst init = () => {\n\t\t_ctx.clearRect(0, 0, canvas.width, canvas.height)\n\t\tcanvas.addEventListener('mousemove',(event) =>{\n\t\t\tconst {x, y} = getCords(event)\n\t\t\tcords = {x: Math.floor(x / cellSize), y: Math.floor(y / cellSize)}\n\t\t});\n\t\tcanvas.addEventListener('mousedown',(event) =>{\n\t\t\tdrawing()\n\t\t\tcanvas.addEventListener('mousemove', drawing);\n\t\t});\n\t\tcanvas.addEventListener('mouseup', () => {\n\t\t\tcanvas.removeEventListener('mousemove',drawing);\n\t\t});\n\t}\n\tinit()\n\n\tconst Cell = (state) => (index) => {\n\t\tconst j = Math.floor(index / w)\n\t\tconst i = index % w\n\t\tconst c = (i, j) => {\n\t\t\tconst _i = i < 0 ? 0: i < w ? i : w - i\n\t\t\tconst _j = j < 0 ? 0: j < h ? j : h - j\n\t\t\treturn _i + _j * w\n\t\t}\n\t\tlet _state = state;\n\t\tconst setState = (s) => _state = s\n\t\tconst getState = () => _state\n\t\tconst siblings = () => [\n\t\t\tworld[c(i - 1, j - 1)],\n\t\t\tworld[c(i - 1, j)],\n\t\t\tworld[c(i - 1, j + 1)],\n\t\t\tworld[c(i, j - 1)],\n\t\t\tworld[c(i, j + 1)],\n\t\t\tworld[c(i + 1, j - 1)],\n\t\t\tworld[c(i + 1, j)],\n\t\t\tworld[c(i + 1, j + 1)]\n\t\t]\n\t\treturn {\n\t\t\tgetState,\n\t\t\tsiblings,\n\t\t\tindex,\n\t\t\tsetState\n\t\t}\n\t}\n\n\tlet world = [...Array(w*h).keys()].map(Cell(0))\n\tlet cords = {}\n\tconst getCords = event => {\n\t\treturn {\n\t\t\tx:event.pageX - canvas.offsetLeft,\n\t\t\ty:event.pageY - canvas.offsetTop\n\t\t}\n\t}\n\n\tconst alive = x => x >= 1\n\n\tconst rules = (prev, res) => {\n\t\tif (alive(prev)){\n\t\t\tif (res > 2 && res < 3){\n\t\t\t\treturn prev + 0.2\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0.3\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t\tif (res > 4){\n\t\t\t\t\treturn prev + 1\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn prev - 0.1\n\t\t\t\t}\n\t\t}\n\t}\n\tconst next = (cell) => {\n\t\tconst prev = cell.getState()\n\t\tconst res =  _dot(cell.siblings().map(s=>s.getState()), [...Array(8).fill(1)])\n\t\treturn Cell(rules(prev, res))(cell.index)\n\t}\n\n\tconst epoch = () => {\n\t\tworld = world.map(next)\n\t}\n\n\tconst _dot = (v1, v2) => v1.reduce((a, x, i) => a + x * v2[i], 0)\n\t\n\tconst draw = (i, j) => {\n\t\tconst state = world[i + j * w].getState()\n\t\t_ctx.beginPath();\n\t\t_ctx.fillStyle = `rgb(${ state * 180 },${ state * 50 },${ state * 30 })`\n\t\t_ctx.fillRect(i*cellSize,j*cellSize,cellSize, cellSize)\n\t\t//_ctx.arc(i*cellSize,j*cellSize,cellSize / 2, 0, Math.PI * 2)\n\t\t_ctx.fill()\n\t}\n\n\n\tconst render = () => setInterval(() => {\n\t\tepoch()\n\t\t_ctx.clearRect(0, 0, canvas.width, canvas.height)\n\t\tfor (let i = 0; i < w; ++i){\n\t\t\tfor (let j = 0; j < h; ++j){\n\t\t\t\tdraw(i,j)\n\t\t\t}\n\t\t}\n\t}, 100)\n\t\n\treturn {\n\t\trender\n\t}\n}\n\n\n\n\nexport default Engine\n\n"]},"metadata":{},"sourceType":"module"}