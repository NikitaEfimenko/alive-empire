{"ast":null,"code":"var _jsxFileName = \"/home/efimenko/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/alive-empire-game/client/src/components/ChatInput/index.js\";\nimport React from 'react';\nimport './ChatInput.css';\nimport { connect } from 'react-redux';\nimport { postMessage as _postMessage, sendMessage as _sendMessage } from '../../actions';\nimport { focusInit } from '../../libs/config';\nimport posed from 'react-pose';\nvar Input = posed.input(focusInit);\n\nvar ChatInput = function ChatInput(_ref) {\n  var postMessage = _ref.postMessage,\n      socket = _ref.socket,\n      sendMessage = _ref.sendMessage;\n\n  var handle = function handle(event) {\n    if (event.keyCode == 13) {\n      postMessage(event.target.value);\n      sendMessage(socket, event.target.value);\n      event.target.value = '';\n    }\n  };\n\n  return React.createElement(Input, {\n    className: \"input-field\",\n    placeholder: \"\\u0427\\u0410\\u0422\",\n    onKeyDown: handle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  });\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    socket: state.socket\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    postMessage: function postMessage(message) {\n      return dispatch(_postMessage(message));\n    },\n    sendMessage: function sendMessage(socket, message) {\n      return dispatch(_sendMessage(socket, message));\n    }\n  };\n};\n\nvar ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(ChatInput);\nexport { ConnectedComponent as ChatInput };","map":{"version":3,"sources":["/home/efimenko/Рабочий стол/alive-empire-game/client/src/components/ChatInput/index.js"],"names":["React","connect","postMessage","sendMessage","focusInit","posed","Input","input","ChatInput","socket","handle","event","keyCode","target","value","mapStateToProps","state","mapDispatchToProps","dispatch","message","ConnectedComponent"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAW,IAAXA,YAAT,EAAsBC,WAAW,IAAXA,YAAtB,QAAyC,eAAzC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,IAAMC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAYH,SAAZ,CAAd;;AAEA,IAAMI,SAAS,GAAG,SAAZA,SAAY,OAAwC;AAAA,MAAtCN,WAAsC,QAAtCA,WAAsC;AAAA,MAAzBO,MAAyB,QAAzBA,MAAyB;AAAA,MAAjBN,WAAiB,QAAjBA,WAAiB;;AACzD,MAAMO,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK,EAAI;AACvB,QAAIA,KAAK,CAACC,OAAN,IAAiB,EAArB,EAAwB;AACvBV,MAAAA,WAAW,CAACS,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAX;AACAX,MAAAA,WAAW,CAACM,MAAD,EAASE,KAAK,CAACE,MAAN,CAAaC,KAAtB,CAAX;AACAH,MAAAA,KAAK,CAACE,MAAN,CAAaC,KAAb,GAAqB,EAArB;AACA;AACD,GAND;;AAOA,SACC,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAC,aAAjB;AAA+B,IAAA,WAAW,EAAC,oBAA3C;AAAiD,IAAA,SAAS,EAAEJ,MAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD;AAGA,CAXD;;AAaA,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAChC,SAAO;AACNP,IAAAA,MAAM,EAAEO,KAAK,CAACP;AADR,GAAP;AAGA,CAJD;;AAMA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACtC,SAAO;AACNhB,IAAAA,WAAW,EAAE,qBAAAiB,OAAO;AAAA,aAAID,QAAQ,CAAChB,YAAW,CAACiB,OAAD,CAAZ,CAAZ;AAAA,KADd;AAENhB,IAAAA,WAAW,EAAE,qBAACM,MAAD,EAASU,OAAT;AAAA,aAAqBD,QAAQ,CAACf,YAAW,CAACM,MAAD,EAASU,OAAT,CAAZ,CAA7B;AAAA;AAFP,GAAP;AAIA,CALD;;AAOA,IAAMC,kBAAkB,GAAGnB,OAAO,CAACc,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CT,SAA7C,CAA3B;AAEA,SACCY,kBAAkB,IAAIZ,SADvB","sourcesContent":["import React from 'react'\nimport './ChatInput.css'\nimport { connect } from 'react-redux'\nimport { postMessage, sendMessage } from '../../actions'\nimport { focusInit } from '../../libs/config'\nimport posed from 'react-pose'\nconst Input = posed.input(focusInit)\n\nconst ChatInput = ({postMessage, socket, sendMessage}) => {\n\tconst handle = event => {\n\t\tif (event.keyCode == 13){\n\t\t\tpostMessage(event.target.value)\n\t\t\tsendMessage(socket, event.target.value)\n\t\t\tevent.target.value = ''\n\t\t}\n\t}\n\treturn (\n\t\t<Input className='input-field' placeholder='ЧАТ' onKeyDown={handle}/>\n\t)\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsocket: state.socket\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tpostMessage: message => dispatch(postMessage(message)),\n\t\tsendMessage: (socket, message) => dispatch(sendMessage(socket, message))\n\t}\n}\n\nconst ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(ChatInput)\n\nexport {\n\tConnectedComponent as ChatInput\n}"]},"metadata":{},"sourceType":"module"}