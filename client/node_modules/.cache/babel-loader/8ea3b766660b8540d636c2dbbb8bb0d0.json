{"ast":null,"code":"import { SELECT_NAME, SELECT_RACE, SET_POPULATION_SIZE, POST_MESSAGE, NEW_PLAYERS, ADD_SOCKET, LOGIN } from '../constants';\nexport var selectRace = function selectRace(name) {\n  return {\n    type: SELECT_RACE,\n    payload: name\n  };\n};\nexport var login = function login() {\n  return {\n    type: LOGIN\n  };\n};\nexport var sendMessage = function sendMessage(socket, message) {\n  return function (dispatch) {\n    socket.emit('send-message', message);\n  };\n};\nexport var postMessage = function postMessage(message) {\n  return {\n    type: POST_MESSAGE,\n    payload: message\n  };\n};\nexport var selectName = function selectName(name) {\n  return {\n    type: SELECT_NAME,\n    payload: name\n  };\n};\n\nvar newPlayers = function newPlayers(players) {\n  return {\n    type: NEW_PLAYERS,\n    payload: players\n  };\n};\n\nvar showMessage = function showMessage(config) {\n  return {\n    type: 'SHOW_MESSAGE',\n    payload: config\n  };\n};\n\nvar addSocket = function addSocket(socket) {\n  return {\n    type: ADD_SOCKET,\n    payload: socket\n  };\n};\n\nexport var initSocket = function initSocket(socket, engine) {\n  return function (dispatch) {\n    socket.on('new-players', function (players) {\n      dispatch(newPlayers(players));\n    });\n    socket.on('response-message', function (config) {\n      dispatch(showMessage(config));\n    });\n    dispatch(addSocket(socket));\n    socket.on('render', function (world) {\n      engine.set(world);\n      engine.paint();\n    });\n  };\n}; //client-server async action\n\nexport var sendLoginInfo = function sendLoginInfo(socket, config) {\n  return function (dispatch) {\n    socket.emit('send-login-info', config);\n  };\n};\nexport var sendMousePosition = function sendMousePosition(socket, x, y) {\n  return function (dispatch) {\n    var config = {\n      x: x,\n      y: y\n    };\n    socket.emit('send-mouse-position', config);\n  };\n}; //server-client async action","map":{"version":3,"sources":["/home/efimenko/Рабочий стол/alive-empire-game/client/src/actions/index.js"],"names":["SELECT_NAME","SELECT_RACE","SET_POPULATION_SIZE","POST_MESSAGE","NEW_PLAYERS","ADD_SOCKET","LOGIN","selectRace","name","type","payload","login","sendMessage","socket","message","dispatch","emit","postMessage","selectName","newPlayers","players","showMessage","config","addSocket","initSocket","engine","on","world","set","paint","sendLoginInfo","sendMousePosition","x","y"],"mappings":"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","sourcesContent":["import {\n\tSELECT_NAME,\n\tSELECT_RACE,\n\tSET_POPULATION_SIZE,\n\tPOST_MESSAGE,\n\tNEW_PLAYERS,\n\tADD_SOCKET,\n\tLOGIN\n} from '../constants'\n\nexport const selectRace = (name) => {\n\treturn {\n\t\ttype:SELECT_RACE,\n\t\tpayload: name\n\t}\n}\n\nexport const login = () => {\n\treturn {\n\t\ttype:LOGIN,\n\t}\n}\n\n\n\nexport const sendMessage = (socket, message) => {\n\treturn dispatch => {\n\t\tsocket.emit('send-message', message)\n\t}\n}\n\n\nexport const postMessage = (message) => {\n\t\treturn {\n\t\t\ttype:POST_MESSAGE,\n\t\t\tpayload: message\n\t\t}\n}\n\n\nexport const selectName = (name) => {\n\treturn {\n\t\ttype:SELECT_NAME,\n\t\tpayload: name\n\t}\n}\n\n\n\nconst newPlayers = players => {\n\treturn {\n\t\ttype: NEW_PLAYERS,\n\t\tpayload: players\n\t}\n} \n\nconst showMessage = (config) => {\n\treturn {\n\t\ttype:'SHOW_MESSAGE',\n\t\tpayload: config\n\t}\n}\n\nconst addSocket = socket => {\n\t\treturn {\n\t\t\ttype: ADD_SOCKET,\n\t\t\tpayload: socket\n\t\t}\n}\n\nexport const initSocket = (socket, engine) => {\n\t\treturn dispatch => {\n\t\t\tsocket.on('new-players', players => {\n\t\t\t\t\tdispatch(newPlayers(players))\n\t\t\t})\n\t\t\tsocket.on('response-message', config => {\n\t\t\t\t\tdispatch(showMessage(config))\n\t\t\t})\n\t\t\tdispatch(addSocket(socket))\n\t\t\t\n\t\t\tsocket.on('render', world => {\n\t\t\t\tengine.set(world)\n\t\t\t\tengine.paint()\n\t\t\t})\n\t\t}\n}\n\n\n//client-server async action\n\nexport const sendLoginInfo = (socket, config) => {\n\treturn dispatch => {\n\t\t\tsocket.emit('send-login-info', config)\n\t}\n}\n\nexport const sendMousePosition = (socket, x, y) => {\n\treturn dispatch => {\n\t\tconst config = {\n\t\t\tx: x,\n\t\t\ty: y\n\t\t}\n\t\tsocket.emit('send-mouse-position', config)\n\t}\n}\n\n//server-client async action\n\n\n\n\n \n\n"]},"metadata":{},"sourceType":"module"}